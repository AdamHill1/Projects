package TicTacToeGame;

import java.awt.Color;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author clatulip
 */
public class GameBoard extends javax.swing.JFrame {

    private GameDataModel myModel;

    /**
     * Creates new form GameBoard
     */
    public GameBoard(GameDataModel myModel) {
        this.myModel = myModel;
        initComponents();
        getContentPane().setBackground(new Color(121, 208, 195));
        refreshLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelTurn = new javax.swing.JLabel();
        jLayeredPaneTTT = new javax.swing.JLayeredPane();
        jButtonTopRight = new javax.swing.JButton();
        jButtonMiddleLeft = new javax.swing.JButton();
        jButtonTopLeft = new javax.swing.JButton();
        jButtonTopMiddle = new javax.swing.JButton();
        jButtonCenter = new javax.swing.JButton();
        jButtonMiddleRight = new javax.swing.JButton();
        jButtonBottomLeft = new javax.swing.JButton();
        jButtonBottomMiddle = new javax.swing.JButton();
        jButtonBottomRight = new javax.swing.JButton();
        jLabelGrid = new javax.swing.JLabel();
        jButtonNextRound = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();
        jLabelPlayer2 = new javax.swing.JLabel();
        jLabelPlayer1 = new javax.swing.JLabel();
        jLabelRound = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Tic Tac Toe");

        jLabelTurn.setText("Player X Turn");

        jButtonTopRight.setBorderPainted(false);
        jButtonTopRight.setFocusPainted(false);
        jButtonTopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopRight);
        jButtonTopRight.setBounds(220, 30, 70, 69);

        jButtonMiddleLeft.setBorderPainted(false);
        jButtonMiddleLeft.setFocusPainted(false);
        jButtonMiddleLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonMiddleLeft);
        jButtonMiddleLeft.setBounds(30, 130, 80, 72);

        jButtonTopLeft.setBorderPainted(false);
        jButtonTopLeft.setFocusPainted(false);
        jButtonTopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopLeft);
        jButtonTopLeft.setBounds(30, 30, 80, 69);

        jButtonTopMiddle.setBorderPainted(false);
        jButtonTopMiddle.setFocusPainted(false);
        jButtonTopMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopMiddleActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonTopMiddle);
        jButtonTopMiddle.setBounds(130, 30, 70, 69);

        jButtonCenter.setBorderPainted(false);
        jButtonCenter.setFocusPainted(false);
        jButtonCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCenterActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonCenter);
        jButtonCenter.setBounds(130, 130, 70, 72);

        jButtonMiddleRight.setBorderPainted(false);
        jButtonMiddleRight.setFocusPainted(false);
        jButtonMiddleRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMiddleRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonMiddleRight);
        jButtonMiddleRight.setBounds(220, 130, 70, 72);

        jButtonBottomLeft.setBorderPainted(false);
        jButtonBottomLeft.setFocusPainted(false);
        jButtonBottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomLeftActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomLeft);
        jButtonBottomLeft.setBounds(30, 220, 80, 70);

        jButtonBottomMiddle.setBorderPainted(false);
        jButtonBottomMiddle.setFocusPainted(false);
        jButtonBottomMiddle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomMiddleActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomMiddle);
        jButtonBottomMiddle.setBounds(130, 220, 70, 70);

        jButtonBottomRight.setBorderPainted(false);
        jButtonBottomRight.setFocusPainted(false);
        jButtonBottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBottomRightActionPerformed(evt);
            }
        });
        jLayeredPaneTTT.add(jButtonBottomRight);
        jButtonBottomRight.setBounds(220, 220, 70, 70);

        jLabelGrid.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/Grid.png"))); // NOI18N
        jLayeredPaneTTT.add(jLabelGrid);
        jLabelGrid.setBounds(20, 10, 307, 302);

        jButtonNextRound.setText("Next Round");
        jButtonNextRound.setEnabled(false);
        jButtonNextRound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextRoundActionPerformed(evt);
            }
        });

        jButtonQuit.setText("Quit");
        jButtonQuit.setEnabled(false);
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        jLabelPlayer2.setText("Player 2");

        jLabelPlayer1.setText("Player 1");

        jLabelRound.setText("Round:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jLabelRound, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabelPlayer2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonQuit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNextRound)
                        .addGap(31, 31, 31))))
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelPlayer1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelPlayer2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelRound)))
                .addGap(18, 18, 18)
                .addComponent(jLabelTurn)
                .addGap(18, 18, 18)
                .addComponent(jLayeredPaneTTT, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNextRound)
                    .addComponent(jButtonQuit))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(0, jButtonTopLeft);
        }
    }//GEN-LAST:event_jButtonTopLeftActionPerformed

    private void jButtonTopMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(1, jButtonTopMiddle);
        }
    }//GEN-LAST:event_jButtonTopMiddleActionPerformed

    private void jButtonTopRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(2, jButtonTopRight);
        }
    }//GEN-LAST:event_jButtonTopRightActionPerformed

    private void jButtonMiddleLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(3, jButtonMiddleLeft);
        }
    }//GEN-LAST:event_jButtonMiddleLeftActionPerformed

    private void jButtonCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCenterActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(4, jButtonCenter);
        }
    }//GEN-LAST:event_jButtonCenterActionPerformed

    private void jButtonMiddleRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMiddleRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(5, jButtonMiddleRight);
        }
    }//GEN-LAST:event_jButtonMiddleRightActionPerformed

    private void jButtonBottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomLeftActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(6, jButtonBottomLeft);
        }
    }//GEN-LAST:event_jButtonBottomLeftActionPerformed

    private void jButtonBottomMiddleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomMiddleActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(7, jButtonBottomMiddle);
        }
    }//GEN-LAST:event_jButtonBottomMiddleActionPerformed

    private void jButtonBottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBottomRightActionPerformed
        if (!myModel.isGameOver()) {
            buttonAction(8, jButtonBottomRight);
        }
    }//GEN-LAST:event_jButtonBottomRightActionPerformed

    private void jButtonNextRoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextRoundActionPerformed
        myModel.startNewRound();


    }//GEN-LAST:event_jButtonNextRoundActionPerformed

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitActionPerformed

    private void setButtonRed(Token t, javax.swing.JButton button) {
        if (t == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon_Red.png")));
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon_Red.png")));
        }
    }

    public void buttonAction(int index, javax.swing.JButton button) {
        // Try to change the token
        if (!myModel.changeToken(index)) {
            return;
        }

        // changed token, so update image
        if (myModel.getToken(index) == Token.O) {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
        } else {
            button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));

        }

        // check to see if game is won
        if (myModel.isGameOver()) {
            Token t = myModel.getToken(index);
            updateColor(t);
        }

        // update label
        refreshLabel();

        // if it's now the computer's turn call that method
        if (!myModel.isP1Turn() && !myModel.isTwoPlayers()) {
            computerTurn();

        }
    }

    public void updateColor(Token t) {
        //TO DO: update colors of winning row/column/diagonal line
        //rows
        if (myModel.getWin() == Win.TOP_ROW) {
            setButtonRed(t, jButtonTopLeft);
            setButtonRed(t, jButtonTopMiddle);
            setButtonRed(t, jButtonTopRight);
        } else if (myModel.getWin() == Win.MID_ROW) {
            setButtonRed(t, jButtonMiddleLeft);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonMiddleRight);
        } else if (myModel.getWin() == Win.BOT_ROW) {
            setButtonRed(t, jButtonBottomLeft);
            setButtonRed(t, jButtonBottomMiddle);
            setButtonRed(t, jButtonBottomRight);
        } //columns 
        else if (myModel.getWin() == Win.LEFT_COL) {
            setButtonRed(t, jButtonTopLeft);
            setButtonRed(t, jButtonMiddleLeft);
            setButtonRed(t, jButtonBottomLeft);
        } else if (myModel.getWin() == Win.MID_COL) {
            setButtonRed(t, jButtonTopMiddle);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomMiddle);
        } else if (myModel.getWin() == Win.RIGHT_COL) {
            setButtonRed(t, jButtonTopRight);
            setButtonRed(t, jButtonMiddleRight);
            setButtonRed(t, jButtonBottomRight);
        }//diagonal 1
        else if (myModel.getWin() == Win.DIAG1) {
            setButtonRed(t, jButtonTopLeft);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomRight);
        }//diagonal 2
        else if (myModel.getWin() == Win.DIAG2) {
            setButtonRed(t, jButtonTopRight);
            setButtonRed(t, jButtonCenter);
            setButtonRed(t, jButtonBottomLeft);
        }

    }

    public void computerTurn() {
        //TO DO: implement this method so that the computer selects a location and a token is shown in the game board
        int v;
        Random r = new Random();
        javax.swing.JButton button = null;
        while (true) {
            v = r.nextInt(9);
            //get the middle space to cut out diagonals if its not taken
            if (myModel.getToken(4) == Token.Blank) {
                v = 4;
            } //if there are two token in a row column or diagonal with same value will put it in the empty space
            // kinda works messes up sometimes
            else {
                for (int i = 0; i < 9; i++) {
                    //rows cases
                    if (myModel.getToken(i) == myModel.getToken(i + 1) && myModel.getToken(i + 2) == Token.Blank) {
                        v = i + 2;
                        break;
                    } else if (myModel.getToken(i) == myModel.getToken(i + 2) && myModel.getToken(i + 1) == Token.Blank) {
                        v = i + 1;
                        break;
                    } else if (myModel.getToken(i + 1) == myModel.getToken(i + 2) && myModel.getToken(i) == Token.Blank) {
                        v = i;
                        break;
                        //column cases
                    } else if (myModel.getToken(i) == myModel.getToken(i + 3) && myModel.getToken(i + 6) == Token.Blank) {
                        v = i + 6;
                        break;
                    } else if (myModel.getToken(i) == myModel.getToken(i + 6) && myModel.getToken(i + 3) == Token.Blank) {
                        v = i + 3;
                        break;
                    } else if (myModel.getToken(i + 3) == myModel.getToken(i + 6) && myModel.getToken(i) == Token.Blank) {
                        v = i;
                        break;
                        //diagonal 1 cases
                    } else if (myModel.getToken(i) == myModel.getToken(i + 4) && myModel.getToken(i + 8) == Token.Blank) {
                        v = i + 8;
                        break;
                    } else if (myModel.getToken(i) == myModel.getToken(i + 8) && myModel.getToken(i + 4) == Token.Blank) {
                        v = i + 4;
                        break;
                    } else if (myModel.getToken(i + 4) == myModel.getToken(i + 8) && myModel.getToken(i) == Token.Blank) {
                        v = i;
                        break;
                        //diagonal 2
                    } else if (myModel.getToken(i + 2) == myModel.getToken(i + 4) && myModel.getToken(i + 6) == Token.Blank) {
                        v = i + 6;
                        break;
                    } else if (myModel.getToken(i + 2) == myModel.getToken(i + 6) && myModel.getToken(i + 4) == Token.Blank) {
                        v = i + 4;
                        break;
                    } else if (myModel.getToken(i + 6) == myModel.getToken(i + 4) && myModel.getToken(i + 2) == Token.Blank) {
                        v = i + 2;
                        break;
                    } else {
                        break;
                    }
                }
            }
            //make sure token isnt taken
            if (!(myModel.changeToken(v))) {
                v = -1;
            }
            //assigns button based on number
            if (v == 0) {
                button = jButtonTopLeft;
            } else if (v == 1) {
                button = jButtonTopMiddle;
            } else if (v == 2) {
                button = jButtonTopRight;
            } else if (v == 3) {
                button = jButtonMiddleLeft;
            } else if (v == 4) {
                button = jButtonCenter;
            } else if (v == 5) {
                button = jButtonMiddleRight;
            } else if (v == 6) {
                button = jButtonBottomLeft;
            } else if (v == 7) {
                button = jButtonBottomMiddle;
            } else if (v == 8) {
                button = jButtonBottomRight;
            }//sets the token chosen
            if (v > -1) {
                if (myModel.getToken(v) == Token.O) {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/O_Icon.png")));
                    break;
                } else {
                    button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TicTacToeGame/X_Icon.png")));
                    break;
                }
            }
        }
        // check to see if game is won
        if (myModel.isGameOver()) {
            Token t = myModel.getToken(v);
            updateColor(t);
        }

        // update label
        refreshLabel();

    }

    public void refreshLabel() {
        // pause for a bit
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }//board update
        if (myModel.getRound() != myModel.getMAX_ROUNDS()) {
            jLabelPlayer1.setText(myModel.getP1().getName() + " Rounds won: " + myModel.getPlayer1Counter());
            jLabelPlayer2.setText(myModel.getP2().getName() + " Rounds won: " + myModel.getPlayer2Counter());
            jLabelRound.setText("Round: " + myModel.getRound());
        }

        if (myModel.isGameOver()) {
            myModel.setRound(myModel.getRound() + 1);
            if (myModel.isP1Turn()) {
                //tie condition
                if (myModel.getWin() == Win.NONE) {
                    jLabelTurn.setText("The game ended in a tie!!!");

                }//player win 
                else {
                    jLabelTurn.setText(myModel.getP1().getName() + " wins!!!");
                    myModel.setPlayer1Counter(myModel.getPlayer1Counter() + 1);
                    jLabelPlayer1.setText(myModel.getP1().getName() + " Rounds won: " + myModel.getPlayer1Counter());
                }
            } else {//tie condition
                if (myModel.getWin() == Win.NONE) {
                    jLabelTurn.setText("The game ended in a tie!!!");
                } else { //player win
                    jLabelTurn.setText(myModel.getP2().getName() + " wins!!!");
                    myModel.setPlayer2Counter(myModel.getPlayer2Counter() + 1);
                    jLabelPlayer2.setText(myModel.getP2().getName() + " Rounds won: " + myModel.getPlayer2Counter());
                }
            }
            //round checker and update board
            if (myModel.getRound() != myModel.getMAX_ROUNDS()) {
                jLabelRound.setText("Round: " + myModel.getRound());
                jButtonQuit.setEnabled(true);
                jButtonNextRound.setEnabled(true);
            } else {//stops a max rounds
                jButtonQuit.setEnabled(true);
                jButtonNextRound.setEnabled(false);
                jLabelPlayer1.setText(myModel.getP1().getName() + " Rounds won: " + myModel.getPlayer1Counter());
                jLabelPlayer2.setText(myModel.getP2().getName() + " Rounds won: " + myModel.getPlayer2Counter());
                jLabelRound.setText("Round: " + myModel.getRound());
            }

            return;
        }

        // update player label 
        if (myModel.isP1Turn()) {
            jLabelTurn.setText(myModel.getP1().getName() + "'s turn.");
        } else {
            jLabelTurn.setText(myModel.getP2().getName() + "'s turn.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBottomLeft;
    private javax.swing.JButton jButtonBottomMiddle;
    private javax.swing.JButton jButtonBottomRight;
    private javax.swing.JButton jButtonCenter;
    private javax.swing.JButton jButtonMiddleLeft;
    private javax.swing.JButton jButtonMiddleRight;
    private javax.swing.JButton jButtonNextRound;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JButton jButtonTopLeft;
    private javax.swing.JButton jButtonTopMiddle;
    private javax.swing.JButton jButtonTopRight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JLabel jLabelPlayer1;
    private javax.swing.JLabel jLabelPlayer2;
    private javax.swing.JLabel jLabelRound;
    private javax.swing.JLabel jLabelTurn;
    private javax.swing.JLayeredPane jLayeredPaneTTT;
    // End of variables declaration//GEN-END:variables
}
